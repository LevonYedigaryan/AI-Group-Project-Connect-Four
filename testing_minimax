import math
import random

class Connect4Game:
    def __init__(self, rows=6, cols=7):
        self.rows = rows
        self.cols = cols
        self.board = [[0 for _ in range(cols)] for _ in range(rows)]  # 0 means empty, 1 means player 1, 2 means player 2
        self.current_player = 1  # Player 1 starts first, but we'll change this randomly

    def is_winner(self, player):
        # Check horizontal, vertical, and diagonal for a winner
        for row in range(self.rows):
            for col in range(self.cols):
                if self.check_direction(row, col, 1, 0, player) or \
                   self.check_direction(row, col, 0, 1, player) or \
                   self.check_direction(row, col, 1, 1, player) or \
                   self.check_direction(row, col, 1, -1, player):
                    return True
        return False

    def check_direction(self, row, col, d_row, d_col, player):
        # Check if there are 4 pieces in a row for the player in the given direction
        for i in range(4):
            r, c = row + i * d_row, col + i * d_col
            if not (0 <= r < self.rows and 0 <= c < self.cols) or self.board[r][c] != player:
                return False
        return True

    def is_full(self):
        # Check if the board is full
        for col in range(self.cols):
            if self.board[0][col] == 0:
                return False
        return True

    def get_valid_moves(self):
        # Return list of columns where a move can be made
        return [col for col in range(self.cols) if self.board[0][col] == 0]

    def make_move(self, col):
        # Place a piece in the first available row in the given column
        for row in range(self.rows - 1, -1, -1):
            if self.board[row][col] == 0:
                self.board[row][col] = self.current_player
                break

    def undo_move(self, col):
        # Undo the most recent move in the given column
        for row in range(self.rows):
            if self.board[row][col] == self.current_player:
                self.board[row][col] = 0
                break

    def print_board(self):
        # Print the current board
        for row in self.board:
            print(' '.join(str(cell) for cell in row))
        print()

    def switch_player(self):
        self.current_player = 3 - self.current_player  # Switch between 1 and 2

def minimax(game, depth, alpha, beta, maximizing_player):
    if depth == 0 or game.is_winner(1) or game.is_winner(2) or game.is_full():
        return evaluate_board(game)

    valid_moves = game.get_valid_moves()

    if maximizing_player:
        max_eval = -math.inf
        for col in valid_moves:
            game.make_move(col)
            eval = minimax(game, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            game.undo_move(col)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for col in valid_moves:
            game.make_move(col)
            eval = minimax(game, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            game.undo_move(col)
            if beta <= alpha:
                break
        return min_eval

def evaluate_board(game):
    if game.is_winner(1):
        return 10000
    elif game.is_winner(2):
        return -10000
    else:
        return 0

def random_starting_point(game):
    # Randomly choose who starts: Player 1 or Player 2
    start_player = random.choice([1, 2])
    game.current_player = start_player
    print(f"Player {start_player} will start the game.")

def main():
    # Initialize game
    game = Connect4Game()
    random_starting_point(game)  # Randomly select who starts
    
    # Game loop
    while not game.is_winner(1) and not game.is_winner(2) and not game.is_full():
        game.print_board()
        print(f"Player {game.current_player}'s turn:")
        
        valid_moves = game.get_valid_moves()

        # Minimax for the AI (Maximizing player = AI, Minimizing player = opponent)
        if game.current_player == 1:  # AI turn (Player 1)
            best_move = None
            best_value = -math.inf
            for col in valid_moves:
                game.make_move(col)
                move_value = minimax(game, 3, -math.inf, math.inf, False)  # Search with depth 3 for AI
                if move_value > best_value:
                    best_value = move_value
                    best_move = col
                game.undo_move(col)

            print(f"AI (Player 1) chose column {best_move}")
            game.make_move(best_move)
        else:  # Human or random opponent move (Player 2)
            # Random opponent move for demonstration
            opponent_move = random.choice(valid_moves)
            print(f"Player 2 (opponent) chose column {opponent_move}")
            game.make_move(opponent_move)

        game.switch_player()

    # End of game, print result
    game.print_board()
    if game.is_winner(1):
        print("Player 1 wins!")
    elif game.is_winner(2):
        print("Player 2 wins!")
    else:
        print("It's a draw!")

if __name__ == "__main__":
    main()
